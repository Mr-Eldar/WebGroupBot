import asyncio
from _datetime import datetime

from aiogram import Router, F
from aiogram.enums import ChatAction
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, TelegramObject, InputMediaPhoto, ReplyKeyboardRemove
from aiogram.filters import CommandStart, Command

from app.database.requests import *
from app.keyboards import *
from app.states import *

user = Router()


async def send_typing_action(event: TelegramObject):
    user_id = getattr(event.from_user, 'id', None)
    bot = getattr(event, 'bot', None)

    if bot and user_id:
        await bot.send_chat_action(chat_id=user_id, action=ChatAction.TYPING)
        await asyncio.sleep(0.5)


@user.message(CommandStart())
async def cmd_start(message: Message):
    await send_typing_action(message)
    await message.answer_sticker('CAACAgUAAxkBAAEPXzZoxsCW7T8qaMp_-9lOzggZ6c5-xwACXhQAArP_iVVdQXtnlQYGRTYE')
    await message.answer('üöÄ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ü–∏—Ñ—Ä–æ–≤–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ 4-–π –≥—Ä—É–ø–ø—ã!</b>\n\n'
        '–Ø —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤ –º–∏—Ä–µ –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏. –ó–¥–µ—Å—å —Ç—ã —Å–º–æ–∂–µ—à—å:\n\n'
        
        '‚úÖ –ü—Ä–∏–Ω–∏–º–∞—Ç—å –≤—ã–∑–æ–≤—ã (–î–ó)\n'
        '‚úÖ –°–ª–µ–¥–∏—Ç—å –∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º\n' 
        '‚úÖ –°–æ—Ä–µ–≤–Ω–æ–≤–∞—Ç—å—Å—è —Å –¥—Ä—É–≥–∏–º–∏\n'
        '‚úÖ –°—Ç–∞—Ç—å –ª—É—á—à–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º\n\n'
        
        'üìä –¢–≤–æ–π —Å—Ç–∞—Ç—É—Å: <b>–ù–æ–≤–∏—á–æ–∫</b>\n'
        '‚ÄºÔ∏è‚ÄºÔ∏è ‚û°Ô∏è –ù–∞–ø–∏—à–∏ <b>/profile</b> —á—Ç–æ–±—ã –±–æ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞–±–æ—Ç–∞–ª ‚ÄºÔ∏è‚ÄºÔ∏è\n\n'
        
        '<b>–ù–µ —Ç–µ—Ä—è–π –≤—Ä–µ–º—è ‚Äî –∫–æ–¥ –∂–¥–µ—Ç!</b> üíª')


@user.message(Command('help'))
async def cmd_help(message: Message):
    await send_typing_action(message)
    await message.answer_sticker('CAACAgIAAxkBAAEPXzRoxsAcKrXTtcGuID5HfPM4VteRnAAChwIAAladvQpC7XQrQFfQkDYE')
    await message.answer('üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>WebBot4Group</b>, –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è –Ω–∞—à–µ–π –≥—Ä—É–ø–ø—ã!\n\n'
        '–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å —É—á–µ–±–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –∏ —Å–¥–µ–ª–∞—Ç—å –µ–≥–æ –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–º.\n\n'

        'üìå <b>–ß–¢–û –Ø –£–ú–ï–Æ</b>:\n\n'

        '<b>–î–ª—è —É—á–µ–Ω–∏–∫–æ–≤:</b>\n'
        '‚úÖ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π –∏ –¥–µ–¥–ª–∞–π–Ω–æ–≤\n'
        '‚úÖ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç —Å –≤–∞—à–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –∏ —Ä–µ–π—Ç–∏–Ω–≥–æ–º\n'
        '‚úÖ –£–¥–æ–±–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ—Ç–º–µ—Ç–∫–∏ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –î–ó\n'
        '‚úÖ –†–µ–π—Ç–∏–Ω–≥–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å –±–∞–ª–ª–∞–º–∏ –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è\n'
        '‚úÖ –ò—Å—Ç–æ—Ä–∏—è –≤—Å–µ—Ö –≤–∞—à–∏—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç\n\n'

        '<b>–î–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:</b>\n'
        'üéì –ü—Ä–æ—Å—Ç–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π\n'
        'üéì –ö–æ–Ω—Ç—Ä–æ–ª—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –î–ó –≤—Å–µ–º–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏\n'
        'üéì –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤\n'
        'üéì –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –≥—Ä—É–ø–ø–µ\n\n'

        'üîπ <b>–° —á–µ–≥–æ –Ω–∞—á–∞—Ç—å?</b>\n'
        '–ï—Å–ª–∏ –≤—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã - –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –§–ò–û –∫–æ–≥–¥–∞ —è –ø–æ–ø—Ä–æ—à—É.\n\n'

        'üîπ <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n'
        '<b>/start</b> - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n'
        '<b>/profile</b> - –≤–∞—à –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç\n'
        '<b>/hw</b> - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–µ –∑–∞–¥–∞–Ω–∏—è\n'
        '<b>/rating</b> - —Ä–µ–π—Ç–∏–Ω–≥ –≥—Ä—É–ø–ø—ã\n'
        '<b>/history</b> - –∏—Å—Ç–æ—Ä–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π\n\n'

        '–†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è 4 –≥—Ä—É–ø–ø—ã –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏! üöÄ')


@user.message(Command('profile'))
@user.callback_query(F.data == 'back_to_profile')
async def cmd_profile(event: Message | CallbackQuery, state: FSMContext):
    user = await find_user(event.from_user.id)
    await update_user_ratings()
    await send_typing_action(event)
    if isinstance(event, Message):
        if not user:
            await event.answer('üéØ <b>–ù–∞—á–Ω–∏ —Å–≤–æ–π –ø—É—Ç—å –≤ –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!</b>\n\n'
                                '–î–ª—è —Å—Ç–∞—Ä—Ç–∞ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç. <b>–í–≤–µ–¥–∏ —Å–≤–æ–µ –§–ò —á—Ç–æ–±—ã:</b>\n\n'

                                '‚ú® –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –î–ó –∏ –ø—Ä–æ–µ–∫—Ç–∞–º\n'
                                'üìä –ù–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å\n'
                                'üèÜ –ó–∞–Ω—è—Ç—å –º–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ –≥—Ä—É–ø–ø—ã\n\n'

                                '–í–≤–µ–¥–∏ –§–ò–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <b>–§–∞–º–∏–ª–∏—è –ò–º—è</b>\n\n'

                                '<b>–ì–æ—Ç–æ–≤—ã —Å—Ç–∞—Ç—å –ª—É—á—à–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º?</b> üíª')
            await state.set_state(Reg.sn)
        else:
            level_info = await get_user_level(user.points)

            await event.answer(
                f'üìä <b>–£–ß–ï–ë–ù–´–ô DASHBOARD ‚Äî {user.su}</b>\n\n'
                f'üë§ <b>–ü–†–û–§–ò–õ–¨</b>\n'
                f'<b>ID: {event.from_user.id}</b>\n'
                f'<b>–ì—Ä—É–ø–ø–∞: Web-4</b>\n'
                f'<b>–£—Ä–æ–≤–µ–Ω—å: {level_info["name"]}</b>\n'
                f'<b>–ü—Ä–æ–≥—Ä–µ—Å—Å: {get_level_progress_bar(level_info["progress"])}</b>\n\n'
                f'üìà <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê</b>\n'
                f'üíØ –í—Å–µ–≥–æ –±–∞–ª–ª–æ–≤: {user.points}\n'
                f'‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –î–ó: {user.completed_hw}\n'
                f'üèÜ –†–µ–π—Ç–∏–Ω–≥: #{user.rating}\n\n'
                f'üìã <b>–ë–´–°–¢–†–´–ï –î–ï–ô–°–¢–í–ò–Ø</b>\n'
                '/hw ‚Äî –í—Å–µ –∑–∞–¥–∞–Ω–∏—è\n'
                '/rating ‚Äî –ü–æ–ª–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥\n'
                '/materials ‚Äî –£—á–µ–±–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã\n'
                '/help ‚Äî –ü–æ–º–æ—â—å\n\n',
                reply_markup=profile_kb
            )
    else:
        if not user:
            await event.message.answer('üéØ <b>–ù–∞—á–Ω–∏ —Å–≤–æ–π –ø—É—Ç—å –≤ –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!</b>\n\n'
                            '–î–ª—è —Å—Ç–∞—Ä—Ç–∞ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç. <b>–í–≤–µ–¥–∏ —Å–≤–æ–µ –§–ò —á—Ç–æ–±—ã:</b>\n\n'

                            '‚ú® –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –î–ó –∏ –ø—Ä–æ–µ–∫—Ç–∞–º\n'
                            'üìä –ù–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å\n'
                            'üèÜ –ó–∞–Ω—è—Ç—å –º–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ –≥—Ä—É–ø–ø—ã\n\n'

                            '–í–≤–µ–¥–∏ –§–ò–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <b>–§–∞–º–∏–ª–∏—è –ò–º—è</b>\n\n'

                            '<b>–ì–æ—Ç–æ–≤—ã —Å—Ç–∞—Ç—å –ª—É—á—à–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º?</b> üíª')
            await state.set_state(Reg.sn)
        else:
            user = await find_user(event.from_user.id)
            user_profile = await find_user_by_id(user.id)  # –ù—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é
            level_info = await get_user_level(user_profile.points)

            await event.message.edit_text(
                f'üìä <b>–£–ß–ï–ë–ù–´–ô DASHBOARD ‚Äî {user.su}</b>\n\n'
                f'üë§ <b>–ü–†–û–§–ò–õ–¨</b>\n'
                f'<b>ID: {event.from_user.id}</b>\n'
                f'<b>–ì—Ä—É–ø–ø–∞: Web-4</b>\n'
                f'<b>–£—Ä–æ–≤–µ–Ω—å: {level_info["name"]}</b>\n'
                f'<b>–ü—Ä–æ–≥—Ä–µ—Å—Å: {get_level_progress_bar(level_info["progress"])}</b>\n\n'
                f'üìà <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê</b>\n'
                f'üíØ –í—Å–µ–≥–æ –±–∞–ª–ª–æ–≤: {user.points}\n'
                f'‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –î–ó: {user.completed_hw}\n'
                f'üèÜ –†–µ–π—Ç–∏–Ω–≥: #{user_profile.rating}\n\n'
                f'üìã <b>–ë–´–°–¢–†–´–ï –î–ï–ô–°–¢–í–ò–Ø</b>\n'
                '/hw ‚Äî –í—Å–µ –∑–∞–¥–∞–Ω–∏—è\n'
                '/rating ‚Äî –ü–æ–ª–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥\n'
                '/materials ‚Äî –£—á–µ–±–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã\n'
                '/help ‚Äî –ü–æ–º–æ—â—å\n\n',
                reply_markup=profile_kb
            )


@user.message(Command('hw'))
@user.callback_query(F.data == 'profile_hw')
async def cmcq_hw(event: Message | CallbackQuery):
    if isinstance(event, Message):
        user = await find_user(event.from_user.id)
        level_info = await get_user_level(user.points)
        await send_typing_action(event)
        await event.answer('üìö <b>–ú–æ–∏ –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è</b>\n\n'
                        'üìä <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n'
                        f'‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {user.completed_hw}\n'
                        f'üî¥ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ: {user.expired_hw}\n'    
                        f'üíØ <b>–ù–∞–±—Ä–∞–Ω–æ –±–∞–ª–ª–æ–≤:</b> {user.points}\n'
                        f'üèÜ <b>–£—Ä–æ–≤–µ–Ω—å:</b> {level_info["name"]}\n\n'    
                        'üéØ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</b>\n'
                        '‚Ä¢ üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è\n'
                        '‚Ä¢ ‚è∞ –ë–ª–∏–∂–∞–π—à–∏–µ –¥–µ–¥–ª–∞–π–Ω—ã\n'
                        '‚Ä¢ ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Ä–∞–±–æ—Ç—ã\n'
                        '‚Ä¢ üéØ –í—ã–±—Ä–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è\n\n'   
                        '–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:', reply_markup=await get_homeworks())
    else:
        user = await find_user(event.from_user.id)
        level_info = await get_user_level(user.points)
        await send_typing_action(event)
        await event.message.edit_text('üìö <b>–ú–æ–∏ –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è</b>\n\n'
                        'üìä <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n'
                        f'‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {user.completed_hw}\n'
                        f'üî¥ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ: {user.expired_hw}\n'
                        f'üíØ <b>–ù–∞–±—Ä–∞–Ω–æ –±–∞–ª–ª–æ–≤:</b> {user.points}\n'
                        f'üèÜ <b>–£—Ä–æ–≤–µ–Ω—å:</b> {level_info["name"]}\n\n'
                        'üéØ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</b>\n'
                        '‚Ä¢ üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è\n'
                        '‚Ä¢ ‚è∞ –ë–ª–∏–∂–∞–π—à–∏–µ –¥–µ–¥–ª–∞–π–Ω—ã\n'
                        '‚Ä¢ ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Ä–∞–±–æ—Ç—ã\n'
                        '‚Ä¢ üéØ –í—ã–±—Ä–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è\n\n'
                        '–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:', reply_markup=await get_homeworks())


@user.message(Command('rating'))
@user.callback_query(F.data == 'profile_rating')
async def clb_rating_list(event: Message | CallbackQuery):
    await update_user_ratings()
    if isinstance(event, Message):
        user_obj = await find_user(event.from_user.id)
    else:
        user_obj = await find_user(event.from_user.id)

    if not user_obj:
        if isinstance(event, Message):
            await event.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /profile")
        else:
            await event.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    await send_typing_action(event)

    if isinstance(event, Message):
        await event.answer_sticker('CAACAgIAAxkBAAEPXzhoxsDcFdEF2pFVN312vT9FPV7DdgACfgIAAladvQpBYnRfUWys5DYE')
        await event.answer('üìä <b>–†–µ–π—Ç–∏–Ω–≥–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞</b>\n\n'
                        '–°–º–æ—Ç—Ä–∏ —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ —Å—Ä–∞–≤–Ω–∏ —Å –¥—Ä—É–≥–∏–º–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏ –≥—Ä—É–ø–ø—ã.\n\n'
                        f'üèÜ <b>–¢–≤–æ—è –ø–æ–∑–∏—Ü–∏—è:</b> #{user_obj.rating}\n'
                        f'üíØ <b>–ë–∞–ª–ª–æ–≤:</b> {user_obj.points}\n'
                        f'‚úÖ <b>–í—ã–ø–æ–ª–Ω–µ–Ω–æ:</b> {user_obj.completed_hw}',
                        reply_markup=await get_rating_users())
    else:
        await event.message.edit_text('üìä <b>–†–µ–π—Ç–∏–Ω–≥–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞</b>\n\n'
                                    '–°–º–æ—Ç—Ä–∏ —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ —Å—Ä–∞–≤–Ω–∏ —Å –¥—Ä—É–≥–∏–º–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏ –≥—Ä—É–ø–ø—ã.\n\n'
                                    f'üèÜ <b>–¢–≤–æ—è –ø–æ–∑–∏—Ü–∏—è:</b> #{user_obj.rating}\n'
                                    f'üíØ <b>–ë–∞–ª–ª–æ–≤:</b> {user_obj.points}\n'
                                    f'‚úÖ <b>–í—ã–ø–æ–ª–Ω–µ–Ω–æ:</b> {user_obj.completed_hw}',
                                    reply_markup=await get_rating_users())


@user.message(Command('materials'))
async def cmd_materials(message: Message):
    await send_typing_action(message)
    await message.answer_sticker('CAACAgUAAxkBAAEPX0JoxsGml6RWrwViJTBv48WCmScG1gACZhMAAjWqIVWR0e-We8liMDYE')
    await message.answer('ü§© –ü–ª–∞–≥–∏–Ω—ã, –∫—É—Ä—Å—ã, —Ñ–∏—à–∫–∏, –≤—Å–µ –≤ —ç—Ç–æ–º —Ä–æ–¥–µ –∑–¥–µ—Å—å üëá', reply_markup=materials_kb)


@user.message(SendHwForCheck.hw_photos, F.text == "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É")
async def finish_photo_sending(message: Message, state: FSMContext):
    data = await state.get_data()
    photos = data.get('photos', [])
    findUser = await find_user(message.from_user.id)
    level_info = await get_user_level(findUser.points)

    if not photos:
        await message.answer('‚ùå –í—ã –Ω–µ –ø—Ä–∏—Å–ª–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–æ—Ç–æ!')
        return

    media_group = []
    for photo_id in photos:
        media_group.append(InputMediaPhoto(media=photo_id))

    await message.bot.send_media_group(1870291778, media=media_group)

    await message.bot.send_message(
        1870291778,
        f"üìò <b>–ù–û–í–û–ï –î–û–ú–ê–®–ù–ï–ï –ó–ê–î–ê–ù–ò–ï</b>\n"
        f"‚ú® ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ ‚ú®\n\n"
        f"üë§ <b>–°—Ç—É–¥–µ–Ω—Ç:</b> {findUser.su}\n"
        f"üéØ <b>–£—Ä–æ–≤–µ–Ω—å:</b> {level_info['name']}\n"
        f"‚≠ê <b>–ë–∞–ª–ª—ã:</b> {findUser.points}\n"
        f"‚úÖ <b>–í—ã–ø–æ–ª–Ω–µ–Ω–æ –î–ó:</b> {findUser.completed_hw}\n\n"
        f"üÜî <code>ID:{message.from_user.id}</code>\n"
        f"üïí <i>{datetime.now().strftime('%d.%m.%Y %H:%M')}</i>",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å –î–ó",
                    callback_data=f"check_success_hw_{data['hw_task_id']}"
                ),
                InlineKeyboardButton(
                    text="‚ö†Ô∏è –î–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ",
                    callback_data=f"check_danget_hw_{message.from_user.id}_{data['hw_task_id']}"
                ),
                InlineKeyboardButton(
                    text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                    callback_data=f"check_reject_hw_{message.from_user.id}_{data['hw_task_id']}"
                )
            ]
        ]),
        parse_mode="HTML"
    )

    await assign_task_to_user(message.from_user.id, data['hw_task_id'])

    await message.answer(
        "üéâ <b>–†–∞–±–æ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!</b>\n\n"
        "üìä –°—Ç–∞—Ç—É—Å: –ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ ‚è≥\n"
        "‚è∞ –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è: 1-2 –¥–Ω—è\n"
        "üí¨ –¢—ã –ø–æ–ª—É—á–∏—à—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–æ–≥–¥–∞ —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≤–µ—Ä—è—Ç",
        parse_mode="HTML",
        reply_markup=ReplyKeyboardRemove()
    )

    await state.clear()


@user.callback_query(F.data == 'profile_settings')
async def clb_profile_settings(callback: CallbackQuery):
    await send_typing_action(callback)
    await callback.message.edit_text('‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è</b>\n\n'
        '–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ—Ç–∞ –ø–æ–¥ —Å–µ–±—è:\n'
        'üé® <b>–ò–∑–º–µ–Ω–∏—Ç—å –§–ò</b> - –∏–∑–º–µ–Ω–∏—Ç—å –§–∞–º–∏–ª–∏—é –ò–º—è\n\n'
        '–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:', reply_markup=profile_settings_kb)


@user.callback_query(F.data == 'settings_edit_fi')
async def clb_settings_edit_fi(callback: CallbackQuery, state: FSMContext):
    await send_typing_action(callback)
    await callback.message.edit_text('‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è</b>\n\n'
                                    '<i>–ó–∞—Ö–æ—Ç–µ–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–µ –§–ò? –ò–ª–∏ –¥–æ–ø—É—Å—Ç–∏–ª–∏ –æ—à–∏–±–∫—É?</i>\n\n'
                                    '<b>–ë–µ–∑ –ø—Ä–æ–±–ª–µ–º! –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–≤–æ–µ –§–ò –∑–∞–Ω–æ–≤–æ.</b>')
    await state.set_state(EditUser.new_sn)


@user.callback_query(F.data.startswith('task_'))
async def clb_task_info(callback: CallbackQuery):
    task_id = callback.data.split('_')[1]
    task = await get_hw_by_id(task_id)  # –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø
    await send_typing_action(callback)
    await callback.answer()
    await callback.message.edit_text('üìö <b>–ù–æ–≤–æ–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ!</b>\n\n'
                                    f'üéØ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {task.task_name}\n'
                                    f'üìÖ <b>–î–µ–¥–ª–∞–π–Ω:</b> {task.task_complete_time}\n'
                                    f'üíØ <b>–ë–∞–ª–ª—ã:</b> {task.points}\n\n'
                                    'üìã <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n'
                                    f'<b>{task.task_description}</b>\n\n'
                                    'üìé <b>–ú–∞—Ç–µ—Ä–∏–∞–ª—ã:</b>\n'
                                    f'{task.task_materials}\n\n', 
                                    reply_markup=await hw_kb(task, callback.from_user.id))


@user.callback_query(F.data.startswith('send_hw_'))
async def clb_send_hw(callback: CallbackQuery, state: FSMContext):
    await send_typing_action(callback)
    await callback.answer()
    await callback.message.edit_text('üì∏ <b>–û—Ç–ø—Ä–∞–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è</b>\n\n'
                                    '–ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ —Ç–≤–æ–µ–π —Ä–∞–±–æ—Ç—ã (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):\n\n'
                                    'üéØ <b>–ß—Ç–æ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:</b>\n'
                                    '‚Ä¢ –°–∫—Ä–∏–Ω—à–æ—Ç—ã –∫–æ–¥–∞\n'
                                    '‚Ä¢ –§–æ—Ç–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞\n'
                                    '‚Ä¢ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é —Ä–∞–±–æ—Ç—ã\n'
                                    '‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è\n\n'
                                    'üìå <b>–ö–∞–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:</b>\n'
                                    '1. –ù–∞–∂–º–∏ –Ω–∞ —Å–∫—Ä–µ–ø–∫—É üìé\n'
                                    '2. –í—ã–±–µ—Ä–∏ "–ì–∞–ª–µ—Ä–µ—è" –∏–ª–∏ "–§–æ—Ç–æ"\n'
                                    '3. –í—ã–±–µ—Ä–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ (—É–¥–µ—Ä–∂–∏–≤–∞–π –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞)\n'
                                    '4. –û—Ç–ø—Ä–∞–≤—å –≤—Å–µ —Å—Ä–∞–∑—É')
    task_id = callback.data.split('_')[-1]
    await state.update_data(hw_task_id=task_id)
    await state.set_state(SendHwForCheck.hw_photos)


@user.callback_query(F.data.startswith('rating_'))
async def get_rating_user_info(callback: CallbackQuery):
    await send_typing_action(callback)
    user_id = int(callback.data.split('_')[1])
    user_profile = await find_user_by_id(user_id)  # –ù—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é

    if not user_profile:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Ä–æ–≤–Ω–µ
    level_info = await get_user_level(user_profile.points)

    profile_text = (
        f"üë§ <b>–ü–†–û–§–ò–õ–¨ ‚Äî {user_profile.su}</b>\n\n"
        f"üéØ <b>–£—Ä–æ–≤–µ–Ω—å:</b> {level_info['name']}\n"
        f"‚≠ê <b>–ë–∞–ª–ª—ã:</b> {user_profile.points}\n"
        f"üèÜ <b>–†–µ–π—Ç–∏–Ω–≥:</b> #{user_profile.rating}\n"
        f"‚úÖ <b>–í—ã–ø–æ–ª–Ω–µ–Ω–æ –î–ó:</b> {user_profile.completed_hw}\n\n"
        f"üìä <b>–ü—Ä–æ–≥—Ä–µ—Å—Å —É—Ä–æ–≤–Ω—è:</b> {get_level_progress_bar(level_info['progress'])}\n\n"
    )

    await callback.message.edit_text(
        profile_text,
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ —Ä–µ–π—Ç–∏–Ω–≥', callback_data='profile_rating')]
        ])
    )
    await callback.answer()


@user.callback_query(F.data == 'in_progress')
async def clb_task_in_progress(callback: CallbackQuery):
    await callback.answer('–í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ —É–∂–µ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ —É—á–∏—Ç–µ–ª–µ–º. ‚åõÔ∏è')


@user.callback_query(F.data == 'approved')
async def clb_task_in_progress(callback: CallbackQuery):
    await callback.answer('–í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω–æ. ‚úÖ')


@user.callback_query(F.data == 'declined')
async def clb_task_in_progress(callback: CallbackQuery):
    await callback.answer('–í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ –±—ã–ª–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ. ‚ùå')


@user.callback_query(F.data.startswith('check_success_hw_'))
async def check_success_hw_process(callback: CallbackQuery, state: FSMContext):
    try:
        task_id = int(callback.data.split('_')[-1])  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ int
        await state.update_data(task_id=task_id)

        await callback.message.bot.delete_message(callback.message.chat.id, callback.message.message_id - 1)
        await callback.message.answer(
            'üë§ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ç–æ—Ä–æ–º—É –∑–∞—Å—á–∏—Ç–∞—Ç—å —ç—Ç–æ –î–ó.',
            reply_markup=await get_users_kb()
        )
        await callback.answer()
        await state.set_state(CheckHw.user_id)
    except Exception as e:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ")
        print(f"Error: {e}")


@user.callback_query(F.data.startswith('check_reject_hw_'))
async def check_reject_hw_process(callback: CallbackQuery, state: FSMContext):
    try:
        task_id = int(callback.data.split('_')[-1])  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ int
        await state.update_data(task_id=task_id)

        await callback.message.bot.delete_message(callback.message.chat.id, callback.message.message_id - 1)
        await callback.message.answer(
            'üë§ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ç–æ—Ä–æ–º—É –æ—Ç–∫–ª–æ–Ω–∏—Ç—å —ç—Ç–æ –î–ó.',
            reply_markup=await get_users_kb()
        )
        await callback.answer()
        await state.set_state(RejectHw.user_id)
    except Exception as e:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ")
        print(f"Error: {e}")


@user.callback_query(F.data.startswith('check_danger_hw_'))
async def check_danger_hw_process(callback: CallbackQuery, state: FSMContext):
    try:
        task_id = int(callback.data.split('_')[-1])  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ int
        await state.update_data(task_id=task_id)

        await callback.message.bot.delete_message(callback.message.chat.id, callback.message.message_id)
        await callback.message.answer(
            'üë§ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ —Å–æ–æ–±—â–∏—Ç—å –æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –î–ó.',
            reply_markup=await get_users_kb()
        )
        await callback.answer()
        await state.set_state(DangerHw.user_id)
    except Exception as e:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ")
        print(f"Error: {e}")


@user.callback_query(CheckHw.user_id, F.data.startswith('check_user_hw_'))
async def check_user_hw_process(callback: CallbackQuery, state: FSMContext):
    try:
        user_id = int(callback.data.split('_')[-1])
        data = await state.get_data()
        task_id = data['task_id']

        task = await get_hw_by_id(task_id)
        points = int(task.points) if isinstance(task.points, str) else task.points

        # –û–¥–æ–±—Ä—è–µ–º –î–ó –∏ –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Ä–æ–≤–Ω–µ
        level_info = await approve_user_hw(user_id, task_id, points)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            message_text = (
                "üéâ <b>–í–∞—à–µ –î–ó –æ–¥–æ–±—Ä–µ–Ω–æ!</b>\n\n"
                f"‚úÖ –†–∞–±–æ—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞\n"
                f"‚≠ê –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {points} –±–∞–ª–ª–æ–≤\n"
            )

            if level_info:
                if level_info["max_level"]:
                    message_text += f"üèÜ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å: {level_info['name']}!\n"
                else:
                    message_text += (
                        f"üìà –ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å: {level_info['name']}\n"
                        f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {get_level_progress_bar(level_info['progress'])}\n"
                        f"üéØ –î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è: {level_info['progress']['required'] - level_info['progress']['current']} –±–∞–ª–ª–æ–≤\n"
                    )

            message_text += "\nüìà –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!"

            await callback.bot.send_message(
                user_id,
                message_text,
                parse_mode="HTML"
            )
        except:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

        await callback.answer("‚úÖ –î–ó —É—Å–ø–µ—à–Ω–æ –æ–¥–æ–±—Ä–µ–Ω–æ!")
        await callback.message.edit_text(f'‚úÖ –î–ó –∑–∞—Å—á–∏—Ç–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!')

    except Exception as e:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –î–ó")
        print(f"Error: {e}")

    await state.clear()


@user.callback_query(RejectHw.user_id, F.data.startswith('check_user_hw_'))
async def reject_user_hw_process(callback: CallbackQuery, state: FSMContext):
    try:
        await state.update_data(user_id=callback.data.split('_')[-1])
        data = await state.get_data()

        await decline_user_hw(data['user_id'], data['task_id'])

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            message_text = (
                "‚ùå <b>–í–∞—à–µ –î–ó –±—ã–ª–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ!</b>\n\n"
            )

            await callback.bot.send_message(
                data['user_id'],
                message_text,
                parse_mode="HTML"
            )
        except:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {data['user_id']}")

        await callback.answer("‚ùå –î–ó –±—ã–ª–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ!")
        await callback.message.edit_text('‚ùå –î–ó –±—ã–ª–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ!')

    except Exception as e:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –î–ó")
        print(f"Error: {e}")

    await state.clear()


@user.callback_query(DangerHw.user_id, F.data.startswith('check_user_hw_'))
async def danger_user_hw_process(callback: CallbackQuery, state: FSMContext):
        await callback.answer()
        await state.update_data(user_id=callback.data.split('_')[-1])
        await callback.message.edit_text('‚úèÔ∏è –û—Ç–ª–∏—á–Ω–æ —Ç–µ–ø–µ—Ä—å –æ–±—ä—è—Å–Ω–∏—Ç–µ –ø–æ—á–µ–º—É —ç—Ç–æ –¥–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ.')
        await state.set_state(DangerHw.description)


@user.message(Reg.sn)
async def reg_surname_name(message: Message, state: FSMContext):
    await send_typing_action(message)
    await state.update_data(user_sn=message.text)
    data = await state.get_data()
    await message.answer('üéØ <b>–û—Ç–ª–∏—á–Ω–æ! –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω!</b>\n\n'    
        f'<b>{data['user_sn']}</b>, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥—É –±—É–¥—É—â–∏—Ö —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤!\n\n'
        
        f'–¢–≤–æ–π —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: <b>–ù–æ–≤–∏—á–æ–∫</b>\n'
        '–ë–∞–ª–ª–æ–≤: <b>0</b> ‚Üí –Ω–æ —ç—Ç–æ –Ω–µ–Ω–∞–¥–æ–ª–≥–æ!\n\n'
        
        '<b>–ì–æ—Ç–æ–≤ –∫ –ø–µ—Ä–≤–æ–º—É –∑–∞–¥–∞–Ω–∏—é? –ñ–º–∏ /hw</b>')
    await set_user(message.from_user.id, data['user_sn'])
    await state.clear()


@user.message(EditUser.new_sn)
async def reg_surname_name(message: Message, state: FSMContext):
    await send_typing_action(message)
    await state.update_data(new_user_sn=message.text)
    await message.answer('‚≠êÔ∏è <b>–û—Ç–ª–∏—á–Ω–æ –§–ò –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ!</b>\n\n'
                         '–í—ã —É–≤–µ—Ä–µ–Ω—ã –≤ —Ç–æ–º, —á—Ç–æ–±—ã –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ?',
                         reply_markup=profile_settings_edit_user_kb)
    await state.set_state(EditUser.sure)
    await message.delete()
    await message.bot.delete_message(message.chat.id, message.message_id - 1)


@user.callback_query(EditUser.sure)
async def reg_surname_name(callback: CallbackQuery, state: FSMContext):
    await send_typing_action(callback)
    if F.data == 'yes':
        await callback.answer('üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—Å –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞')
        data = await state.get_data()
        await edit_user(callback.from_user.id, data['new_user_sn'])
        await cmd_profile(callback, state)
    elif F.data == 'no':
        await cmd_profile(callback, state)
        await state.clear()
    await state.clear()


@user.message(SendHwForCheck.hw_photos, F.photo)
async def hw_send_photos(message: Message, state: FSMContext):
    data = await state.get_data()
    photos = data.get('photos', [])

    photos.append(message.photo[-1].file_id)
    await state.update_data(photos=photos)

    # –ü—Ä–æ—Å–∏–º –ø—Ä–∏—Å–ª–∞—Ç—å –µ—â–µ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å
    await message.answer(
        "üì∏ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ! –ü—Ä–∏—à–ª–∏—Ç–µ –µ—â–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É'",
        reply_markup=finish_kb
    )


@user.message(DangerHw.description)
async def danger_hw(message: Message, state: FSMContext):
    try:
        await state.update_data(danger_desc=message.text)
        data = await state.get_data()

        await danger_user_hw(data['user_id'], data['task_id'])

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            message_text = (
                "‚ùå <b>–í–∞—à–µ –î–ó –±—ã–ª–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ!\n"
                f"–ü–æ –ø—Ä–∏—á–∏–Ω–µ: {data['danger_desc']}</b>\n\n"
            )

            await message.bot.send_message(
                data['user_id'],
                message_text,
                parse_mode="HTML"
            )
        except:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {data['user_id']}")

        await message.answer("‚ùå –î–ó –±—ã–ª–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ!")

    except Exception as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –î–ó")
        print(f"Error: {e}")

    await state.clear()